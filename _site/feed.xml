<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-28T00:38:33-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">A Mind of No Nation</title><subtitle>Gabriel Sestieri&apos;s portfolio and writeup blog.</subtitle><entry><title type="html">gplayscrape.py</title><link href="http://localhost:4000/projects/gplayscrape/2021/12/28/gplayscrape.html" rel="alternate" type="text/html" title="gplayscrape.py" /><published>2021-12-28T00:00:00-05:00</published><updated>2021-12-28T00:00:00-05:00</updated><id>http://localhost:4000/projects/gplayscrape/2021/12/28/gplayscrape</id><content type="html" xml:base="http://localhost:4000/projects/gplayscrape/2021/12/28/gplayscrape.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/gplayscrape.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;I was tasked with finding a way to scrape information on app developers published on Google Play based on specific keywords. 
            Fortunately I found a pip package that established a foundation that I could build upon.
            Using Selenium I continuously parse through the page until it reaches the last app available. 
            The program concurrently opens each app and scrapes the name of the app, the email of the developer, and the company or organization the developer belongs to and outputs it as a dataframe that is then converted to an Excel sheet that can be used for marketing purposes.
            &lt;br&gt; &lt;br&gt;I am planning on adding an automatic emailing functionality that could send a prebuilt email to each developer.
        &lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/gplayscrape.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="gplayscrape" /><summary type="html">Video Demonstration Description I was tasked with finding a way to scrape information on app developers published on Google Play based on specific keywords. Fortunately I found a pip package that established a foundation that I could build upon. Using Selenium I continuously parse through the page until it reaches the last app available. The program concurrently opens each app and scrapes the name of the app, the email of the developer, and the company or organization the developer belongs to and outputs it as a dataframe that is then converted to an Excel sheet that can be used for marketing purposes. I am planning on adding an automatic emailing functionality that could send a prebuilt email to each developer. The Code</summary></entry><entry><title type="html">linkedinbot.py</title><link href="http://localhost:4000/projects/linkedinbot/2021/12/28/linkedinbot.html" rel="alternate" type="text/html" title="linkedinbot.py" /><published>2021-12-28T00:00:00-05:00</published><updated>2021-12-28T00:00:00-05:00</updated><id>http://localhost:4000/projects/linkedinbot/2021/12/28/linkedinbot</id><content type="html" xml:base="http://localhost:4000/projects/linkedinbot/2021/12/28/linkedinbot.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/linkedinbot.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;After the GooglePlay Scraper I was tasked with a LinkedIn bot that could automatically connect with a person based on 
            the searched keyword. It would then send a prebuilt personalized note to aid in the recruiting process. 
            &lt;br&gt; &lt;br&gt; This program runs only after providing the the GUI with a searchword.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/LinkedInBot/linkedinbot.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="linkedinbot" /><summary type="html">Video Demonstration Description After the GooglePlay Scraper I was tasked with a LinkedIn bot that could automatically connect with a person based on the searched keyword. It would then send a prebuilt personalized note to aid in the recruiting process. This program runs only after providing the the GUI with a searchword. The Code</summary></entry><entry><title type="html">robot.py</title><link href="http://localhost:4000/projects/robot/2021/12/27/robot.html" rel="alternate" type="text/html" title="robot.py" /><published>2021-12-27T05:24:36-05:00</published><updated>2021-12-27T05:24:36-05:00</updated><id>http://localhost:4000/projects/robot/2021/12/27/robot</id><content type="html" xml:base="http://localhost:4000/projects/robot/2021/12/27/robot.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/robot.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;A class project that introduced me to OOP in Python. Simulates a very simple fight between two different classes.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/robot.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="robot" /><summary type="html">Video Demonstration Description A class project that introduced me to OOP in Python. Simulates a very simple fight between two different classes. The Code</summary></entry><entry><title type="html">drug_interactions.py</title><link href="http://localhost:4000/projects/druginter/2021/12/27/druginter.html" rel="alternate" type="text/html" title="drug_interactions.py" /><published>2021-12-27T00:00:00-05:00</published><updated>2021-12-27T00:00:00-05:00</updated><id>http://localhost:4000/projects/druginter/2021/12/27/druginter</id><content type="html" xml:base="http://localhost:4000/projects/druginter/2021/12/27/druginter.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/druginter.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;drug_interactions.py is a Python program that makes a series of calls to the National Library of Medicine&apos;s REST API. It then collects all interactions between two drugs. For example if a user inputs &quot;Insulin&quot; the program outputs a file called interactions.txt that stores all interactions between insulin and various other drugs:
            &quot;0,&quot;insulin, regular, human&quot;,leuprolide,The therapeutic efficacy of Insulin human can be decreased when used in combination with Leuprolide.&quot;
        &lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/drug_interactions.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="druginter" /><summary type="html">Video Demonstration Description drug_interactions.py is a Python program that makes a series of calls to the National Library of Medicine&apos;s REST API. It then collects all interactions between two drugs. For example if a user inputs &quot;Insulin&quot; the program outputs a file called interactions.txt that stores all interactions between insulin and various other drugs: &quot;0,&quot;insulin, regular, human&quot;,leuprolide,The therapeutic efficacy of Insulin human can be decreased when used in combination with Leuprolide.&quot; The Code</summary></entry><entry><title type="html">enron.py</title><link href="http://localhost:4000/projects/enron/2021/12/27/enron.html" rel="alternate" type="text/html" title="enron.py" /><published>2021-12-27T00:00:00-05:00</published><updated>2021-12-27T00:00:00-05:00</updated><id>http://localhost:4000/projects/enron/2021/12/27/enron</id><content type="html" xml:base="http://localhost:4000/projects/enron/2021/12/27/enron.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/enron.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;Runs by using the command line; a user can input any keyword they&apos;d like to search through the Enron email database. Uses regex and classes to clean and classify the dataset in order to then be able to call specific parts that a user might need.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/Enron Parsin/enron.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="enron" /><summary type="html">Video Demonstration Description Runs by using the command line; a user can input any keyword they&apos;d like to search through the Enron email database. Uses regex and classes to clean and classify the dataset in order to then be able to call specific parts that a user might need. The Code</summary></entry><entry><title type="html">keylogger.py</title><link href="http://localhost:4000/projects/keylogger/2021/12/27/keylogger.html" rel="alternate" type="text/html" title="keylogger.py" /><published>2021-12-27T00:00:00-05:00</published><updated>2021-12-27T00:00:00-05:00</updated><id>http://localhost:4000/projects/keylogger/2021/12/27/keylogger</id><content type="html" xml:base="http://localhost:4000/projects/keylogger/2021/12/27/keylogger.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/keylogger.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;A simple Python based keylogger that uses pynput to record keystrokes and then store them in a raw and cleaned 
            file where the cleaned file has certain function keys (backspace, enter, etc) edited to represent their function.
            &lt;br&gt; &lt;br&gt; I plan to add a functionality that automatically sends the cleaned file to my email after a certain amount of time has passed.       
        &lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/Keylogger/keylogger.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="keylogger" /><summary type="html">Video Demonstration Description A simple Python based keylogger that uses pynput to record keystrokes and then store them in a raw and cleaned file where the cleaned file has certain function keys (backspace, enter, etc) edited to represent their function. I plan to add a functionality that automatically sends the cleaned file to my email after a certain amount of time has passed. The Code</summary></entry><entry><title type="html">connect4.py</title><link href="http://localhost:4000/projects/connect4/2021/12/27/connect4.html" rel="alternate" type="text/html" title="connect4.py" /><published>2021-12-27T00:00:00-05:00</published><updated>2021-12-27T00:00:00-05:00</updated><id>http://localhost:4000/projects/connect4/2021/12/27/connect4</id><content type="html" xml:base="http://localhost:4000/projects/connect4/2021/12/27/connect4.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/connect4.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;Runs by using the command line; A terminal based connect 4 game. Can run more than two players.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/connect4.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="connect4" /><summary type="html">Video Demonstration Description Runs by using the command line; A terminal based connect 4 game. Can run more than two players. The Code</summary></entry><entry><title type="html">basketball_predictor.py</title><link href="http://localhost:4000/projects/basketball/2021/12/24/basketball.html" rel="alternate" type="text/html" title="basketball_predictor.py" /><published>2021-12-24T06:58:36-05:00</published><updated>2021-12-24T06:58:36-05:00</updated><id>http://localhost:4000/projects/basketball/2021/12/24/basketball</id><content type="html" xml:base="http://localhost:4000/projects/basketball/2021/12/24/basketball.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/basketball.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;Runs by using the command line; a user can input two NBA teams after calling the program and the program will output several bar graphs comparing team stats and a pie chart predicting who would win between the two teams. Based on data from the 2018 NBA season collected into a CSV file.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/BasketballPredict/basketball_predictor.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="basketball" /><summary type="html">Video Demonstration Description Runs by using the command line; a user can input two NBA teams after calling the program and the program will output several bar graphs comparing team stats and a pie chart predicting who would win between the two teams. Based on data from the 2018 NBA season collected into a CSV file. The Code</summary></entry><entry><title type="html">basketball_predictor.py</title><link href="http://localhost:4000/projects/blackjack/2021/12/24/blackjack.html" rel="alternate" type="text/html" title="basketball_predictor.py" /><published>2021-12-24T06:58:36-05:00</published><updated>2021-12-24T06:58:36-05:00</updated><id>http://localhost:4000/projects/blackjack/2021/12/24/blackjack</id><content type="html" xml:base="http://localhost:4000/projects/blackjack/2021/12/24/blackjack.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/blackjack.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;Runs by using the command line; a user can choose the amount they want to bet and then wether to hit (add a card) or stand (satisfied with the cards you have). By playing another hand your score carries over to the next round.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/blackjack.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="blackjack" /><summary type="html">Video Demonstration Description Runs by using the command line; a user can choose the amount they want to bet and then wether to hit (add a card) or stand (satisfied with the cards you have). By playing another hand your score carries over to the next round. The Code</summary></entry><entry><title type="html">hangman.py</title><link href="http://localhost:4000/projects/hangman/2021/12/22/hangman.html" rel="alternate" type="text/html" title="hangman.py" /><published>2021-12-22T06:58:36-05:00</published><updated>2021-12-22T06:58:36-05:00</updated><id>http://localhost:4000/projects/hangman/2021/12/22/hangman</id><content type="html" xml:base="http://localhost:4000/projects/hangman/2021/12/22/hangman.html">&lt;div class=&quot;projectpage&quot;&gt;
    &lt;section class=&quot;video&quot;&gt;
        &lt;h2&gt; Video Demonstration &lt;/h2&gt; &lt;hr&gt;
        &lt;video controls=&quot;controls&quot; width=&quot;1500&quot; height=&quot;auto&quot; src=&quot;/assets/images/hangman.mov&quot;&gt;&lt;/video&gt;
    &lt;/section&gt;
    &lt;section class=&quot;description&quot;&gt;
        &lt;h2&gt;Description&lt;/h2&gt; &lt;hr&gt;
        &lt;p&gt;A simple hangman game that is played through the terminal.&lt;/p&gt;
        &lt;a href=&quot;https://github.com/GabrielSestieri/GabrielSestieri/blob/main/Python/Hangman/hangman.py&quot;&gt;The Code&lt;/a&gt;
    &lt;/section&gt;
&lt;/div&gt;</content><author><name></name></author><category term="projects" /><category term="hangman" /><summary type="html">Video Demonstration Description A simple hangman game that is played through the terminal. The Code</summary></entry></feed>